#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use JSON;
use LWP::UserAgent;

my $token   = "Gm5aCJyE9wngm5eW153Jzgx2BkM1d0";
my $config_file = "$ENV{HOME}/.config/pusher/config";

my $msg_url = "https://api.pushover.net/1/messages.json";
my $snd_url = "https://api.pushover.net/1/sounds.json";
my $rct_url = "https://api.pushover.net/1/receipts/";

my $pms = { token => $token };

if(-e $config_file) {
    open(FILE, "<$config_file");
    while(<FILE>) {
        if($_ =~ /^(\w*) (\w*)$/) {
            $pms->{$1} = $2;
        }
    }
    close(FILE);
}

exit 1 if !GetOptions($pms, 'token|a=s',
                            'url|l=s',
                            'url_title|lt=s',
                            'priority|p=i',
                            'retry|r=i',
                            'expire|e=i',
                            'callback|c=s',
                            'receipt|rp=s',
                            'sound|s=s',
                            'list-sounds|ls',
                            'timestamp|d=i',
                            'title|t=s',
                            'user|u=s',
                            'help|h');


$pms->{message} = join(' ', @ARGV);

if($pms->{'list-sounds'}) {
    my $json = send_request($snd_url, $pms, 1);

    if($json->{status} == 1) {
        print "Available notification sounds:\n\n";

        foreach(sort(keys($json->{sounds}))) {
            print "    $_ ($json->{sounds}->{$_})\n";
        }
    } else {
        print_errors($json);
    }

} elsif($pms->{receipt}) {
    my $json = send_request("$rct_url$pms->{receipt}.json", $pms, 1);

    if($json->{status} == 1) {
        print "Status of emergency message $pms->{message}\n";
        print "  Acknowledged:      $json->{acknowledged}\n";
        print "  Acknowledged at:   $json->{acknowledged_at}\n";
        print "  Last delivered at: $json->{last_delivered_at}\n";
        print "  Expired:           $json->{expired}\n";
        print "  Expires at:        $json->{expires_at}\n";
        print "  Called back:       $json->{called_back}\n";
        print "  Called back at:    $json->{called_back_at}\n";
    } else {
        print_errors($json);
        exit 1;
    }
} elsif(!$pms->{message} || !$pms->{user} || exists($pms->{help})) {
    print_usage();
} else {
    my $json = send_request($msg_url, $pms);

    if($json->{status} != 1) {
        print_errors($json);
        exit 1;
    } elsif($json->{receipt}) {
        print "$json->{receipt}\n";
    }
}

sub send_request {
    my ($url, $para, $get) = @_;
    
    my $ua = LWP::UserAgent->new();
    my $res = $get ? $ua->get("$url?token=$para->{token}") : $ua->post($url, $para);
    
    if($res->header('Client-Warning') && $res->header('Client-Warning') eq 'Internal response') {
        return {status => -1, errors => ['Server unreachable']};
    } else {
        return decode_json($res->content);
    }
}

sub print_errors {
    my ($json) = @_;

    print STDERR "Status: $json->{status}\n";
    foreach(@{$json->{errors}}) {
        print STDERR "    $_\n";
    }
}

sub print_usage {
    print "$0 [OPTIONS] MESSAGE\n\n";
    print "  OPTIONS\n";
    print "    -a,  --token APITOKEN               Optional API token\n";
    print "    -c,  --callback URL                 Optional callback URL for emergency messages\n";
    print "    -d,  --timestamp UNIXTIMESTAMP      Optional timestamp\n";
    print "    -e,  --expire SECONDS               Send retries for emergency messages for the next SECONDS seconds\n";
    print "    -h,  --help                         Show this help\n";
    print "    -l,  --url URL                      Optional link\n";
    print "    -ls, --list-sounds                  Print available sounds\n"; 
    print "    -lt, --url_title URLTITLE           Optional url title\n";
    print "    -p,  --priority -1|0|1|2            Optional priority(-1 - 2)\n";
    print "    -r,  --retry SECONDS                Send retries of emergency messages every SECONDS seconds\n";
    print "    -rp, --receipt RECEIPT              Request status of emergency messages\n";
    print "    -s,  --sound SOUND                  Optional sounds. See -ls for possible sounds\n";
    print "    -t,  --title TITLE                  Optional title\n";
    print "    -u,  --user USERTOKEN               User token\n";
}

